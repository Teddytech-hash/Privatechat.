// PrivateChatApp - Secure Chat App with Encryption, Registration & Packaging for Android/iOS

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet } from 'react-native';
import auth from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';
import CryptoJS from 'crypto-js';

const ENCRYPTION_KEY = 'super_secret_key';

const encryptMessage = (message) => {
  return CryptoJS.AES.encrypt(message, ENCRYPTION_KEY).toString();
};

const decryptMessage = (cipherText) => {
  const bytes = CryptoJS.AES.decrypt(cipherText, ENCRYPTION_KEY);
  return bytes.toString(CryptoJS.enc.Utf8);
};

const ChatScreen = ({ user }) => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    const unsubscribe = firestore()
      .collection('messages')
      .orderBy('createdAt', 'desc')
      .onSnapshot(querySnapshot => {
        const msgs = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          text: decryptMessage(doc.data().text),
        }));
        setMessages(msgs);
      });
    return () => unsubscribe();
  }, []);

  const sendMessage = async () => {
    if (message.trim().length === 0) return;
    const encryptedText = encryptMessage(message);
    await firestore().collection('messages').add({
      text: encryptedText,
      createdAt: new Date().getTime(),
      user: user.email,
    });
    setMessage('');
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={messages}
        keyExtractor={item => item.id}
        inverted
        renderItem={({ item }) => (
          <Text style={styles.message}>{item.user}: {item.text}</Text>
        )}
      />
      <TextInput
        style={styles.input}
        value={message}
        onChangeText={setMessage}
        placeholder="Type a secure message"
      />
      <Button title="Send" onPress={sendMessage} />
    </View>
  );
};

const LoginScreen = ({ setUser, switchToRegister }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const login = async () => {
    try {
      const userCredential = await auth().signInWithEmailAndPassword(email, password);
      setUser(userCredential.user);
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.lockIcon}>üîê</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />
      <Button title="Login" onPress={login} />
      <Button title="Register" onPress={switchToRegister} />
    </View>
  );
};

const RegisterScreen = ({ switchToLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const register = async () => {
    try {
      await auth().createUserWithEmailAndPassword(email, password);
      switchToLogin();
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.lockIcon}>üîê</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />
      <Button title="Register" onPress={register} />
      <Button title="Back to Login" onPress={switchToLogin} />
    </View>
  );
};

export default function App() {
  const [user, setUser] = useState(null);
  const [registering, setRegistering] = useState(false);

  useEffect(() => {
    const subscriber = auth().onAuthStateChanged(setUser);
    return subscriber;
  }, []);

  if (user) return <ChatScreen user={user} />;
  return registering ? (
    <RegisterScreen switchToLogin={() => setRegistering(false)} />
  ) : (
    <LoginScreen setUser={setUser} switchToRegister={() => setRegistering(true)} />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#0a0a0a',
  },
  input: {
    borderWidth: 1,
    borderColor: '#555',
    padding: 10,
    marginVertical: 5,
    color: 'white',
  },
  message: {
    padding: 8,
    color: 'white',
  },
  lockIcon: {
    fontSize: 48,
    textAlign: 'center',
    marginVertical: 20,
    color: '#FFD700',
  },
});
